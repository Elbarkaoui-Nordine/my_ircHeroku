{"version":3,"sources":["components/Connect.js","components/Chatroom/Message.js","components/Chatroom/Chatroom.js","App.js","serviceWorker.js","index.js"],"names":["Connect","props","state","username","rooms","selectRoom","adminName","room","error","socket","io","toChat","bind","Handler","this","on","console","log","length","setState","e","preventDefault","target","name","value","replace","style","position","top","left","Form","onSubmit","Group","Label","Control","type","placeholder","onChange","as","multiple","map","id","key","onClick","to","Button","className","React","Component","Message","background","color","parser","toReact","message","Chatroom","users","owner","children","sendMessage","changeUsername","deleteRoom","queryString","parse","location","search","createRoom","emit","tmpMessage","document","getElementById","objDiv","scrollTop","scrollHeight","link","history","push","window","reload","trim","splitMsg","split","startsWith","receiver","splice","join","messages","result","i","alert","find","user","minHeight","maxHeight","overflow","listStyleType","paddingLeft","child","prompt","variant","App","Container","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e70435bb.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Select from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport {Link,Redirect} from 'react-router-dom'\nimport axios from 'axios';\nimport io from 'socket.io-client';\nclass Connect extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            rooms: [],\n            selectRoom: '',\n            adminName:'',\n            room:'',\n            error: ''\n\n        };\n        this.socket =  io('localhost:4000');\n        this.toChat = this.toChat.bind(this);\n        this.Handler = this.Handler.bind(this);\n\n    }\n\n    //check how to make react and socket io work together\n    componentDidMount(){\n        this.socket.on('getRooms',({rooms}) =>{\n            console.log(rooms)\n            if(  rooms.length > 0 ){\n                this.setState({rooms:rooms}); \n             }\n             else{\n                 this.setState({rooms: ['No room available']});\n             }\n        });\n    }\n\n    toChat(e){\n        e.preventDefault();\n    }\n\n    Handler(e){\n        this.setState({[e.target.name]: e.target.value.replace(/\\s+/, \"\") })\n    }\n\n    // async checkUser(){\n    //     let username = this.state.username;\n    //     let room = this.state.selectRoom;\n    //     if(this.state.username === '' || this.state.selectRoom === '' ){\n    //         this.setState({error:'Choose a username and a room'})\n    //         console.log(this.state.error)\n    //     }else{\n    //         let aaxios\n    //         .post('http://localhost:4000/username',{username,room})\n    //         .then(response => {\n    //             if(response.data.error){\n    //                 this.setState({error:response.data.error})\n    //             }\n    //             if(this.state.error != ''){\n    //                 this.props.history.push(`/irc?room=${this.state.selectRoom}&username=${this.state.username}`)\n    //             }\n    //         })\n    //     }\n   \n    // }\n\n    // async emit(event, data) {\n    //     return new Promise((resolve, reject) => {\n    //         let username = this.state.username;\n    //         let room = this.state.selectRoom;\n    //         this.socket.emit('checkUsername',{username,room}, ({error}) => {\n    //             this.setState({error:error})\n    //             resolve(error);\n    //         });\n            \n    //     });\n    // }\n\n    render(){\n        return(\n        <div style={{\n            position: 'absolute',\n            top:'10%',\n            left:'40%'\n        }}>\n            <div > \n            <h1>Connect to a room</h1>\n                <Form onSubmit={this.toChat}>\n                    <Form.Group >\n                        <Form.Label>username</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter a username\" name='username'  onChange={this.Handler}/>\n                    </Form.Group>\n\n                    <Form.Group >\n                       \n                        <Form.Control as=\"select\" name=\"selectRoom\" onChange={this.Handler}  multiple>\n                        {this.state.rooms.map(id =>\n                            <option key={id} value={id}>{id}</option>\n                        )}\n                        </Form.Control>\n                                    \n                    </Form.Group>\n                        <Link onClick={e => (this.state.username === '' || this.state.selectRoom === '' ) ? e.preventDefault() : null } to={`/irc?room=${this.state.selectRoom}&username=${this.state.username}`} >\n                            <Button className='justify-content-center'>\n                            Chat !\n                        </Button>\n                        </Link>\n    \n                </Form>\n            </div>\n            <div> \n                <h1>Create a room</h1>\n                <Form onSubmit={this.toChat}>\n                    <Form.Group >\n                        <Form.Label>Room name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter a room name\" name='room'  onChange={this.Handler}/>\n                    </Form.Group>\n                   \n                    <Form.Group >\n                        <Form.Label>Username</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter a room name\" name='adminName'  onChange={this.Handler}/>\n                    </Form.Group>\n\n                        <Link onClick={e => (this.state.room === '' || this.state.adminName === '' ) ? e.preventDefault() : null } to={`/irc?createRoom=${this.state.room}&username=${this.state.adminName}`} >\n                            <Button className='justify-content-center'>\n                            Create !\n                        </Button>\n                        </Link>\n            \n                </Form>\n            </div>\n        </div>\n  \n        )\n    }\n}\n\nexport default Connect;","import React from 'react';\nimport parser from 'bbcode-to-react';\n\n\nfunction Message(props) {\nreturn <li style={{background:props.background,color:props.color}} className='p-2'> {parser.toReact(props.message)}</li>;\n}\n \nexport default Message;","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport {location} from 'react-router-dom'\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport Message from './Message';\n\nimport './style.css';\nclass Chatroom extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            room: '',\n            users: [],\n            error:'',\n            owner:false,\n            children:[]\n        };\n        this.socket =  io('/');\n        this.Handler = this.Handler.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.changeUsername = this.changeUsername.bind(this);\n        this.deleteRoom = this.deleteRoom.bind(this);\n    }\n\n    //check how to make react and socket io work together\n    componentDidMount(){\n\n        //counter dans le front qui a chaque ON message reset le timer si le timer atteint la fin delete la room\n    \n        const { username , room, createRoom } = queryString.parse(this.props.location.search);\n\n  \n        \n        if(createRoom && username){\n            let owner = true;\n            this.socket.emit('join',{username,room:createRoom,owner}, ({error}) =>{\n                this.setState({error:error});\n            });\n            if(this.state.error == ''){\n                this.setState({owner: true});\n            }\n            //check if \n        }\n        else if(username && room){\n            this.socket.emit('join',{username,room}, ({error}) =>{\n                this.setState({error:error});\n            });\n        }\n        else{\n            this.setState({error:'This page dosent exist'});\n        }\n\n        this.socket.on('message',({username , message}) => {\n            let tmpMessage = username ?  username+' : '+message : message; \n            if(!this.state.error && document.getElementById('box') !== null ){\n                this.setState({\n                    children:[...this.state.children,tmpMessage ],\n                })\n            }\n            var objDiv = document.getElementById(\"divBox\");\n            objDiv.scrollTop = objDiv.scrollHeight;\n        })\n\n        this.socket.on('users list',((users) => {\n            this.setState({users:users});\n        }))\n\n        this.socket.on('redirection',({link}) => {\n            this.props.history.push(link);\n                window.location.reload();\n        })\n    }\n    \n    \n\n    Handler(e){\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    sendMessage(e){\n        e.preventDefault();\n        let message = document.getElementById('message').value.trim().replace(/\\s+/g, \" \");\n        let splitMsg = message.split(' ');\n        if(splitMsg.length > 2 && message.startsWith('/')){\n            if(splitMsg[0] == '/msg'){\n\n                let receiver = splitMsg[1];\n                splitMsg.splice(0,2);\n                let message = splitMsg.join(' ');\n\n                this.socket.emit('whisper',{receiver,message}, ({error}) =>{\n                    let messages = this.state.children;\n                    messages.push(error);\n                    this.setState({children:messages})\n                });\n            }\n        }\n        else if(splitMsg.length == 2 && message.startsWith('/')){\n                switch (splitMsg[0]) {\n                    case '/nick':\n                        this.changeUsername(splitMsg[1]);\n                      break;\n                    case '/list':\n                        this.socket.emit('getRegexList',splitMsg[1], (result) =>{\n                            let messages = this.state.children;\n                            messages.push('List of the rooms on the server for this string :');\n                            for( let i = 0 ; i < result.length ; i++){\n                                result[i].room ? messages.push(result[i].room) : messages.push(result[i]);\n                            }\n                            this.setState({children:messages})\n                        });\n                        break;\n                    case '/create':\n                        this.socket.emit('checkRoom',splitMsg[1], ({error}) =>{\n                            if(error){\n                                let messages = this.state.children;\n                                messages.push(error);\n                                this.setState({children:messages})\n                            }\n                        });\n                        break;\n                    case '/join':\n                        this.socket.emit('joinRoom',splitMsg[1], ({error}) =>{\n                            if(error){\n                                let messages = this.state.children;\n                                messages.push(error);\n                                this.setState({children:messages})\n                            }\n                        });\n                        break;\n                    default:\n                      alert(`commande inconnue`);   \n                  }\n        }\n        else if(message.startsWith('/')){\n            switch (message) {\n                case '/users':\n                    let messages = this.state.children;\n                    messages.push('List of the users in this room :');\n                    for( let i = 0 ; i < this.state.users.length ; i++){\n                        messages.push(this.state.users[i].username);\n                    }\n                    this.setState({children:messages})\n                  break;\n                case '/list':\n                    this.socket.emit('getAllRooms',{}, ({result}) =>{\n                        let messages = this.state.children;\n                        messages.push('List of the rooms on the server :');\n                        for( let i = 0 ; i < result.length ; i++){\n                            messages.push(result[i].room);\n                        }\n                        this.setState({children:messages})\n                    });\n                    break;\n                case '/delete':\n                   if(this.state.owner){\n                       this.deleteRoom();\n                   }\n                    break;\n                case '/part':\n                    this.props.history.push('/');\n                    window.location.reload();\n                   break;\n                default:\n                    alert(`commande inconnue`); \n            }\n        }\n        else if(message != ''){\n            this.socket.emit('sendMessage',message,({error}) => {\n                this.setState({error:error});\n            });\n        }\n        document.getElementById('message').value = '';\n    }\n\n    changeUsername(username){\n            \n        const found = this.state.users.find(user => user.username === username);\n\n        if(found){\n            alert('Username already taken in this room');\n        }\n        else{\n            this.socket.emit('Change username',username);\n        }\n    }\n\n    deleteRoom(){\n            this.socket.emit('deleteRoom',{},({error}) => {\n                this.setState({error:error});\n            });\n    }\n\n    render(){\n        if(this.state.error){\n            return (<h1>{this.state.error}</h1>)\n        }\n        return(\n        <div > \n            <div className='d-flex flex-row'> \n                <ul className='w-20 p-1 list-group scroll'>\n                    \n                    {this.state.users.map( (user,i) => {\n                        return (\n                        <li key={i} className=\"list-group-item\">{user.username}</li>\n                        )\n                    })}\n                </ul>\n        \n                <div id=\"divBox\" className='w-100 p-3 border border-primary' style={{\n                    minHeight:'400px',\n                    maxHeight:'400px',\n                    overflow:'scroll'\n                }}>\n                    <ul id='box' style={{\n                        listStyleType:'none',\n                        paddingLeft:'0',\n                    }}\n                    >\n                    {this.state.children.map((child,i) => i%2 == 0 ? <Message key={i} message={child} background='#6D7B8D' color='white'  /> : <Message key={i} message={child} />)}\n\n                    </ul>\n\n                </div>\n            </div>\n            <Form onSubmit={this.sendMessage}>\n                <Form.Group >\n                    <label>Send a message</label> <Form.Control type=\"text\" placeholder=\"Send a message\"  id='message' name='message'  onChange={this.Handler}/>\n                    </Form.Group>\n\n                    <Button type='sumbit' className='m-2 justify-content-center'>\n                        Submit\n                    </Button>\n                    <Button onClick={() => {\n                        let username = prompt('What is your new username');\n    \n                        this.changeUsername(username);\n                        }} variant=\"outline-secondary  justify-content-end\">\n                        Change username\n                    </Button>\n                    {this.state.owner ?  <Button onClick={this.deleteRoom} className='m-2 justify-content-center'>\n                        Delete room\n                    </Button> : null}\n            </Form>\n          \n          \n        </div>\n        )\n    }\n}\n\n\nexport default Chatroom;","import React from 'react';\nimport Connect from './components/Connect';\nimport Chatroom from './components/Chatroom/Chatroom';\nimport './App.css';\nimport Container from 'react-bootstrap/Container'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nfunction App() {\n  return (\n    <Router>\n    <Container>\n      <Route  exact path='/' component={Connect} />\n      <Route exact  path='/irc' component={Chatroom} />\n    </Container>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}